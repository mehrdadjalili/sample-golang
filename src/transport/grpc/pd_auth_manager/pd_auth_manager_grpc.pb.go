// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: pd_auth_manager.proto

package pd_auth_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthManagerService_UserList_FullMethodName    = "/pd_auth.AuthManagerService/UserList"
	AuthManagerService_UserById_FullMethodName    = "/pd_auth.AuthManagerService/UserById"
	AuthManagerService_EditUser_FullMethodName    = "/pd_auth.AuthManagerService/EditUser"
	AuthManagerService_CountByRole_FullMethodName = "/pd_auth.AuthManagerService/CountByRole"
	AuthManagerService_Count_FullMethodName       = "/pd_auth.AuthManagerService/Count"
	AuthManagerService_Statistics_FullMethodName  = "/pd_auth.AuthManagerService/Statistics"
)

// AuthManagerServiceClient is the client API for AuthManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthManagerServiceClient interface {
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	UserById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*UserByIdResponse, error)
	EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*RegularResponse, error)
	CountByRole(ctx context.Context, in *CountByRoleRequest, opts ...grpc.CallOption) (*CountByRoleResponse, error)
	Count(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Statistics(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
}

type authManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthManagerServiceClient(cc grpc.ClientConnInterface) AuthManagerServiceClient {
	return &authManagerServiceClient{cc}
}

func (c *authManagerServiceClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, AuthManagerService_UserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) UserById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*UserByIdResponse, error) {
	out := new(UserByIdResponse)
	err := c.cc.Invoke(ctx, AuthManagerService_UserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*RegularResponse, error) {
	out := new(RegularResponse)
	err := c.cc.Invoke(ctx, AuthManagerService_EditUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) CountByRole(ctx context.Context, in *CountByRoleRequest, opts ...grpc.CallOption) (*CountByRoleResponse, error) {
	out := new(CountByRoleResponse)
	err := c.cc.Invoke(ctx, AuthManagerService_CountByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) Count(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, AuthManagerService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) Statistics(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, AuthManagerService_Statistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthManagerServiceServer is the server API for AuthManagerService service.
// All implementations must embed UnimplementedAuthManagerServiceServer
// for forward compatibility
type AuthManagerServiceServer interface {
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	UserById(context.Context, *ByIdRequest) (*UserByIdResponse, error)
	EditUser(context.Context, *EditUserRequest) (*RegularResponse, error)
	CountByRole(context.Context, *CountByRoleRequest) (*CountByRoleResponse, error)
	Count(context.Context, *NullRequest) (*CountResponse, error)
	Statistics(context.Context, *NullRequest) (*StatisticsResponse, error)
	mustEmbedUnimplementedAuthManagerServiceServer()
}

// UnimplementedAuthManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthManagerServiceServer struct {
}

func (UnimplementedAuthManagerServiceServer) UserList(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedAuthManagerServiceServer) UserById(context.Context, *ByIdRequest) (*UserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserById not implemented")
}
func (UnimplementedAuthManagerServiceServer) EditUser(context.Context, *EditUserRequest) (*RegularResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedAuthManagerServiceServer) CountByRole(context.Context, *CountByRoleRequest) (*CountByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountByRole not implemented")
}
func (UnimplementedAuthManagerServiceServer) Count(context.Context, *NullRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedAuthManagerServiceServer) Statistics(context.Context, *NullRequest) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (UnimplementedAuthManagerServiceServer) mustEmbedUnimplementedAuthManagerServiceServer() {}

// UnsafeAuthManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthManagerServiceServer will
// result in compilation errors.
type UnsafeAuthManagerServiceServer interface {
	mustEmbedUnimplementedAuthManagerServiceServer()
}

func RegisterAuthManagerServiceServer(s grpc.ServiceRegistrar, srv AuthManagerServiceServer) {
	s.RegisterService(&AuthManagerService_ServiceDesc, srv)
}

func _AuthManagerService_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagerService_UserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_UserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).UserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagerService_UserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).UserById(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagerService_EditUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).EditUser(ctx, req.(*EditUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_CountByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).CountByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagerService_CountByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).CountByRole(ctx, req.(*CountByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagerService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).Count(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagerService_Statistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).Statistics(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthManagerService_ServiceDesc is the grpc.ServiceDesc for AuthManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pd_auth.AuthManagerService",
	HandlerType: (*AuthManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserList",
			Handler:    _AuthManagerService_UserList_Handler,
		},
		{
			MethodName: "UserById",
			Handler:    _AuthManagerService_UserById_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _AuthManagerService_EditUser_Handler,
		},
		{
			MethodName: "CountByRole",
			Handler:    _AuthManagerService_CountByRole_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _AuthManagerService_Count_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _AuthManagerService_Statistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pd_auth_manager.proto",
}
